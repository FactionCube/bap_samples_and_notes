000007ba: program
0000079d: sub .plt(\.plt_result)
000007bb: \.plt_result :: out u32 = RAX

000006d7:
000006da: #75 := mem[0x404008, el]:u64
000006dd: RSP := RSP - 8
000006e0: mem := mem with [RSP, el]:u64 <- #75
000006e4: call mem[0x404010, el]:u64 with noreturn

0000079e: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007bc: __do_global_dtors_aux_result :: out u32 = RAX

000001b0:
000001b2: call @endbr with return %000001b4

000001b4:
000001b7: #29 := mem[0x404048]
000001ba: CF := mem[0x404048] < 0
000001bd: OF := high:1[mem[0x404048] & (mem[0x404048] ^ #29)]
000001c0: AF := 0x10 = (0x10 & (#29 ^ mem[0x404048]))
000001c3: PF :=
          ~low:1[let $1 = #29 >> 4 ^ #29 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000001c6: SF := high:1[#29]
000001c9: ZF := 0 = #29
000001ce: when ~ZF goto %000001cc
0000079f: goto %00000649

000001cc:
000001d4: #31 := mem[RSP, el]:u64
000001d7: RSP := RSP + 8
000001d9: call #31 with noreturn

00000649:
0000064c: #69 := RBP
0000064f: RSP := RSP - 8
00000652: mem := mem with [RSP, el]:u64 <- #69
00000657: RBP := RSP
0000065c: RSP := RSP - 8
0000065f: mem := mem with [RSP, el]:u64 <- 0x401136
00000661: call @deregister_tm_clones with return %00000663

00000663:
00000666: mem := mem with [0x404048] <- 1
0000066b: RBP := mem[RSP, el]:u64
0000066e: RSP := RSP + 8
00000673: #70 := mem[RSP, el]:u64
00000676: RSP := RSP + 8
00000678: call #70 with noreturn

000007a0: sub __libc_csu_fini(__libc_csu_fini_result)
000007bd: __libc_csu_fini_result :: out u32 = RAX

00000527:
00000529: call @endbr with return %0000052b

0000052b:
0000052e: #60 := mem[RSP, el]:u64
00000531: RSP := RSP + 8
00000533: call #60 with noreturn

000007a1: sub __libc_csu_init(__libc_csu_init_result)
000007be: __libc_csu_init_result :: out u32 = RAX

0000040f:
00000411: call @endbr with return %00000413

00000413:
00000416: #42 := R15
00000419: RSP := RSP - 8
0000041c: mem := mem with [RSP, el]:u64 <- #42
00000421: R15 := 0x403E10
00000426: #43 := R14
00000429: RSP := RSP - 8
0000042c: mem := mem with [RSP, el]:u64 <- #43
00000431: R14 := RDX
00000436: #44 := R13
00000439: RSP := RSP - 8
0000043c: mem := mem with [RSP, el]:u64 <- #44
00000441: R13 := RSI
00000446: #45 := R12
00000449: RSP := RSP - 8
0000044c: mem := mem with [RSP, el]:u64 <- #45
00000451: R12 := pad:64[low:32[RDI]]
00000456: #46 := RBP
00000459: RSP := RSP - 8
0000045c: mem := mem with [RSP, el]:u64 <- #46
00000461: RBP := 0x403E18
00000466: #47 := RBX
00000469: RSP := RSP - 8
0000046c: mem := mem with [RSP, el]:u64 <- #47
00000471: #48 := RBP
00000474: #49 := R15
00000477: RBP := RBP - R15
0000047a: CF := #48 < #49
0000047d: OF := high:1[(#48 ^ #49) & (#48 ^ RBP)]
00000480: AF := 0x10 = (0x10 & (RBP ^ #48 ^ #49))
00000483: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000486: SF := high:1[RBP]
00000489: ZF := 0 = RBP
0000048e: #51 := RSP
00000491: RSP := RSP - 8
00000494: CF := #51 < 8
00000497: OF := high:1[(#51 ^ 8) & (#51 ^ RSP)]
0000049a: AF := 0x10 = (0x10 & (RSP ^ #51 ^ 8))
0000049d: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000004a0: SF := high:1[RSP]
000004a3: ZF := 0 = RSP
000004a9: RSP := RSP - 8
000004ac: mem := mem with [RSP, el]:u64 <- 0x4013D1
000004ae: call @_init with return %000004b0

000004b0:
000004b3: #54 := RBP
000004b6: RBP := RBP ~>> 3
000004b9: CF := high:1[#54 << 0x3D]
000004bc: SF := high:1[RBP]
000004bf: ZF := 0 = RBP
000004c2: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000004c5: AF := unknown[bits]:u1
000004c8: OF := unknown[bits]:u1
000004cd: when ZF goto %000004cb
000007a2: goto %00000536

00000536:
00000539: RBX := 0
0000053c: AF := unknown[bits]:u1
0000053f: ZF := 1
00000542: PF := 1
00000545: OF := 0
00000548: CF := 0
0000054b: SF := 0
000007a3: goto %0000054f

0000054f:
00000552: RDX := R14
00000557: RSI := R13
0000055c: RDI := pad:64[low:32[R12]]
00000561: #61 := mem[R15 + (RBX << 3), el]:u64
00000564: RSP := RSP - 8
00000567: mem := mem with [RSP, el]:u64 <- 0x4013ED
00000569: call #61 with return %0000056c

0000056c:
0000056f: #62 := RBX
00000572: RBX := RBX + 1
00000575: CF := RBX < #62
00000578: OF := ~high:1[#62] & (high:1[#62] | high:1[RBX]) &
          ~(high:1[#62] & high:1[RBX])
0000057b: AF := 0x10 = (0x10 & (RBX ^ #62 ^ 1))
0000057e: PF :=
          ~low:1[let $1 = RBX >> 4 ^ RBX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000581: SF := high:1[RBX]
00000584: ZF := 0 = RBX
00000589: #65 := RBP - RBX
0000058c: CF := RBP < RBX
0000058f: OF := high:1[(RBP ^ RBX) & (RBP ^ #65)]
00000592: AF := 0x10 = (0x10 & (#65 ^ RBP ^ RBX))
00000595: PF :=
          ~low:1[let $1 = #65 >> 4 ^ #65 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000598: SF := high:1[#65]
0000059b: ZF := 0 = #65
0000059f: when ~ZF goto %0000054f
000007a4: goto %000004cb

000004cb:
000004d3: #56 := RSP
000004d6: RSP := RSP + 8
000004d9: CF := RSP < #56
000004dc: OF := ~high:1[#56] & (high:1[#56] | high:1[RSP]) &
          ~(high:1[#56] & high:1[RSP])
000004df: AF := 0x10 = (0x10 & (RSP ^ #56 ^ 8))
000004e2: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000004e5: SF := high:1[RSP]
000004e8: ZF := 0 = RSP
000004ed: RBX := mem[RSP, el]:u64
000004f0: RSP := RSP + 8
000004f5: RBP := mem[RSP, el]:u64
000004f8: RSP := RSP + 8
000004fd: R12 := mem[RSP, el]:u64
00000500: RSP := RSP + 8
00000505: R13 := mem[RSP, el]:u64
00000508: RSP := RSP + 8
0000050d: R14 := mem[RSP, el]:u64
00000510: RSP := RSP + 8
00000515: R15 := mem[RSP, el]:u64
00000518: RSP := RSP + 8
0000051d: #59 := mem[RSP, el]:u64
00000520: RSP := RSP + 8
00000522: call #59 with noreturn

000007a5: sub _dl_relocate_static_pie(_dl_relocate_static_pie_result)
000007bf: _dl_relocate_static_pie_result :: out u32 = RAX

000000c8:
000000ca: call @endbr with return %000000cc

000000cc:
000000cf: #12 := mem[RSP, el]:u64
000000d2: RSP := RSP + 8
000000d4: call #12 with noreturn

000007a6: sub _fini(_fini_result)
000007c0: _fini_result :: out u32 = RAX

00000009:
0000000c: call @endbr with return %0000000e

0000000e:
00000011: #1 := RSP
00000014: RSP := RSP - 8
00000017: CF := #1 < 8
0000001a: OF := high:1[(#1 ^ 8) & (#1 ^ RSP)]
0000001d: AF := 0x10 = (0x10 & (RSP ^ #1 ^ 8))
00000020: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000023: SF := high:1[RSP]
00000026: ZF := 0 = RSP
0000002b: #4 := RSP
0000002e: RSP := RSP + 8
00000031: CF := RSP < #4
00000034: OF := ~high:1[#4] & (high:1[#4] | high:1[RSP]) &
          ~(high:1[#4] & high:1[RSP])
00000037: AF := 0x10 = (0x10 & (RSP ^ #4 ^ 8))
0000003a: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000003d: SF := high:1[RSP]
00000040: ZF := 0 = RSP
00000045: #7 := mem[RSP, el]:u64
00000048: RSP := RSP + 8
0000004a: call #7 with noreturn

000007a7: sub _init(_init_result)
000007c1: _init_result :: out u32 = RAX

000004a6:
0000072a: call @endbr with return %0000072c

0000072c:
0000072f: #80 := RSP
00000732: RSP := RSP - 8
00000735: CF := #80 < 8
00000738: OF := high:1[(#80 ^ 8) & (#80 ^ RSP)]
0000073b: AF := 0x10 = (0x10 & (RSP ^ #80 ^ 8))
0000073e: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000741: SF := high:1[RSP]
00000744: ZF := 0 = RSP
00000749: RAX := mem[0x403FF8, el]:u64
0000074e: #83 := RAX
00000751: OF := 0
00000754: CF := 0
00000757: AF := unknown[bits]:u1
0000075a: PF :=
          ~low:1[let $1 = #83 >> 4 ^ #83 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000075d: SF := high:1[#83]
00000760: ZF := 0 = #83
00000765: when ZF goto %00000763
000007a8: goto %0000078d

0000078d:
00000790: #89 := RAX
00000793: RSP := RSP - 8
00000796: mem := mem with [RSP, el]:u64 <- 0x401016
00000798: call #89 with return %00000763

00000763:
0000076b: #85 := RSP
0000076e: RSP := RSP + 8
00000771: CF := RSP < #85
00000774: OF := ~high:1[#85] & (high:1[#85] | high:1[RSP]) &
          ~(high:1[#85] & high:1[RSP])
00000777: AF := 0x10 = (0x10 & (RSP ^ #85 ^ 8))
0000077a: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000077d: SF := high:1[RSP]
00000780: ZF := 0 = RSP
00000785: #88 := mem[RSP, el]:u64
00000788: RSP := RSP + 8
0000078a: call #88 with noreturn

000007a9: sub _start(_start_result)
000007c2: _start_result :: out u32 = RAX

0000004d:
0000004f: call @endbr with return %00000051

00000051:
00000054: RBP := 0
00000057: AF := unknown[bits]:u1
0000005a: ZF := 1
0000005d: PF := 1
00000060: OF := 0
00000063: CF := 0
00000066: SF := 0
0000006b: R9 := RDX
00000070: RSI := mem[RSP, el]:u64
00000073: RSP := RSP + 8
00000078: RDX := RSP
0000007d: RSP := RSP & 0xFFFFFFFFFFFFFFF0
00000080: OF := 0
00000083: CF := 0
00000086: AF := unknown[bits]:u1
00000089: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000008c: SF := high:1[RSP]
0000008f: ZF := 0 = RSP
00000094: #9 := RAX
00000097: RSP := RSP - 8
0000009a: mem := mem with [RSP, el]:u64 <- #9
0000009f: #10 := RSP
000000a2: RSP := RSP - 8
000000a5: mem := mem with [RSP, el]:u64 <- #10
000000aa: R8 := 0x401410
000000af: RCX := 0x4013A0
000000b4: RDI := 0x401160
000000b9: #11 := mem[0x403FF0, el]:u64
000000bc: RSP := RSP - 8
000000bf: mem := mem with [RSP, el]:u64 <- 0x40109E
000000c2: call @__libc_start_main with return %000000c4

000000c4:
000007aa: call @_dl_relocate_static_pie with noreturn

000007ab: sub deregister_tm_clones(deregister_tm_clones_result)
000007c3: deregister_tm_clones_result :: out u32 = RAX

000000db:
000000de: RAX := 0x404048
000000e3: #13 := RAX - 0x404048
000000e6: CF := RAX < 0x404048
000000e9: OF := high:1[(RAX ^ 0x404048) & (RAX ^ #13)]
000000ec: AF := 0x10 = (0x10 & (#13 ^ RAX ^ 0x404048))
000000ef: PF :=
          ~low:1[let $1 = #13 >> 4 ^ #13 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000000f2: SF := high:1[#13]
000000f5: ZF := 0 = #13
000000fa: when ZF goto %000000f8
000007ac: goto %000006a9

000006a9:
000006ac: RAX := 0
000006b1: #73 := RAX
000006b4: OF := 0
000006b7: CF := 0
000006ba: AF := unknown[bits]:u1
000006bd: PF :=
          ~low:1[let $1 = #73 >> 4 ^ #73 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000006c0: SF := high:1[#73]
000006c3: ZF := 0 = #73
000006c7: when ZF goto %000000f8
000007ad: goto %000006cb

000000f8:
00000100: #15 := mem[RSP, el]:u64
00000103: RSP := RSP + 8
00000105: call #15 with noreturn

000006cb:
000006ce: RDI := 0x404048
000006d2: call RAX with noreturn

000007ae: sub frame_dummy(frame_dummy_result)
000007c4: frame_dummy_result :: out u32 = RAX

000001e0:
000001e2: call @endbr with return %000001e4

000001e4:
000001e6: call @register_tm_clones with noreturn

000007af: sub main(main_argc, main_argv, main_result)
000007c5: main_argc :: in u32 = RDI
000007c6: main_argv :: in out u64 = RSI
000007c7: main_result :: out u32 = RAX

000001ea:
000001ed: #32 := RBP
000001f0: RSP := RSP - 8
000001f3: mem := mem with [RSP, el]:u64 <- #32
000001f8: RBP := RSP
000001fd: #33 := RSP
00000200: RSP := RSP - 0x110
00000203: CF := #33 < 0x110
00000206: OF := high:1[(#33 ^ 0x110) & (#33 ^ RSP)]
00000209: AF := 0x10 = (0x10 & (RSP ^ #33 ^ 0x110))
0000020c: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000020f: SF := high:1[RSP]
00000212: ZF := 0 = RSP
00000217: RAX := low:64[RBP - 0xC0]
0000021c: RCX := low:64[RBP - 0x80]
00000221: RSI := 0
00000224: AF := unknown[bits]:u1
00000227: ZF := 1
0000022a: PF := 1
0000022d: OF := 0
00000230: CF := 0
00000233: SF := 0
00000238: mem := mem with [RBP - 4, el]:u32 <- 0
0000023d: RDX := low:64[RBP - 0x40]
00000242: RDI := RDX
00000247: RDX := 0x38
0000024c: mem := mem with [RBP - 0xD0, el]:u64 <- RDX
00000251: mem := mem with [RBP - 0xD8, el]:u64 <- RAX
00000256: mem := mem with [RBP - 0xE0, el]:u64 <- RCX
0000025c: RSP := RSP - 8
0000025f: mem := mem with [RSP, el]:u64 <- 0x4011A5
00000261: call @memset with return %00000263

00000263:
00000266: RAX := mem[RBP - 0xE0, el]:u64
0000026b: RDI := RAX
00000270: RSI := 0x402010
00000275: RDX := mem[RBP - 0xD0, el]:u64
0000027b: RSP := RSP - 8
0000027e: mem := mem with [RSP, el]:u64 <- 0x4011C5
00000280: call @memcpy with return %00000282

00000282:
00000285: mem := mem with [RBP - 0x88, el]:u64 <- 0
0000028a: RAX := mem[RBP - 0xE0, el]:u64
0000028f: mem := mem with [RBP - 0x88, el]:u64 <- RAX
00000294: RAX := mem[RBP - 0xD8, el]:u64
00000299: RDI := RAX
0000029e: RSI := 0xFF
000002a3: RDX := mem[RBP - 0xD0, el]:u64
000002a8: RSP := RSP - 8
000002ab: mem := mem with [RSP, el]:u64 <- 0x4011F9
000002ad: call @memset with return %000002af

000002af:
000002b2: mem := mem with [RBP - 0xC8, el]:u64 <- 0
000002b7: RAX := mem[RBP - 0xD8, el]:u64
000002bc: mem := mem with [RBP - 0xC8, el]:u64 <- RAX
000002c1: RSI := mem[RBP - 0x88, el]:u64
000002c6: RDI := 0x402048
000002cb: RAX := high:56[RAX].0
000002d1: RSP := RSP - 8
000002d4: mem := mem with [RSP, el]:u64 <- 0x40122A
000002d6: call @printf with return %000002d8

000002d8:
000002db: RCX := mem[RBP - 0x88, el]:u64
000002e0: RSI := pad:64[pad:32[mem[RCX, el]:u16]]
000002e5: RDI := 0x40205B
000002ea: mem := mem with [RBP - 0xE4, el]:u32 <- low:32[RAX]
000002ef: RAX := high:56[RAX].0
000002f4: RSP := RSP - 8
000002f7: mem := mem with [RSP, el]:u64 <- 0x40124B
000002f9: call @printf with return %000002fb

000002fb:
000002fe: RCX := mem[RBP - 0x88, el]:u64
00000303: RSI := pad:64[mem[RCX + 4, el]:u32]
00000308: RDI := 0x402071
0000030d: mem := mem with [RBP - 0xE8, el]:u32 <- low:32[RAX]
00000312: RAX := high:56[RAX].0
00000317: RSP := RSP - 8
0000031a: mem := mem with [RSP, el]:u64 <- 0x40126C
0000031c: call @printf with return %0000031e

0000031e:
00000321: RSI := mem[RBP - 0xC8, el]:u64
00000326: RDI := 0x402087
0000032b: mem := mem with [RBP - 0xEC, el]:u32 <- low:32[RAX]
00000330: RAX := high:56[RAX].0
00000335: RSP := RSP - 8
00000338: mem := mem with [RSP, el]:u64 <- 0x40128A
0000033a: call @printf with return %0000033c

0000033c:
0000033f: RCX := mem[RBP - 0xC8, el]:u64
00000344: RSI := pad:64[pad:32[mem[RCX, el]:u16]]
00000349: RDI := 0x40209B
0000034e: mem := mem with [RBP - 0xF0, el]:u32 <- low:32[RAX]
00000353: RAX := high:56[RAX].0
00000358: RSP := RSP - 8
0000035b: mem := mem with [RSP, el]:u64 <- 0x4012AB
0000035d: call @printf with return %0000035f

0000035f:
00000362: RCX := mem[RBP - 0xC8, el]:u64
00000367: RSI := pad:64[mem[RCX + 4, el]:u32]
0000036c: RDI := 0x4020B2
00000371: mem := mem with [RBP - 0xF4, el]:u32 <- low:32[RAX]
00000376: RAX := high:56[RAX].0
0000037b: RSP := RSP - 8
0000037e: mem := mem with [RSP, el]:u64 <- 0x4012CC
00000380: call @printf with return %00000382

00000382:
00000385: RCX := mem[RBP - 0xC8, el]:u64
0000038a: RSI := pad:64[pad:32[mem[RCX, el]:u16]]
0000038f: R8 := 0xC4
00000394: #36 := low:32[R8] - low:32[RSI]
00000397: CF := low:32[R8] < low:32[RSI]
0000039a: OF := high:1[(low:32[R8] ^ low:32[RSI]) & (low:32[R8] ^ #36)]
0000039d: AF := 0x10 = (0x10 & (#36 ^ low:32[R8] ^ low:32[RSI]))
000003a0: PF :=
          ~low:1[let $1 = #36 >> 4 ^ #36 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000003a3: SF := high:1[#36]
000003a6: ZF := 0 = #36
000003ab: when ~ZF goto %000003a9
000007b0: goto %00000622

000003a9:
000003b1: RDI := 0x2A
000003b7: RSP := RSP - 8
000003ba: mem := mem with [RSP, el]:u64 <- 0x40130E
000003bc: call @putchar with return %000003be

000003be:
000003c1: RDI := 0xA
000003c6: mem := mem with [RBP - 0xFC, el]:u32 <- low:32[RAX]
000003cb: RSP := RSP - 8
000003ce: mem := mem with [RSP, el]:u64 <- 0x40131E
000003d0: call @putchar with return %000003d2

000003d2:
000003d5: mem := mem with [RBP - 4, el]:u32 <- 0xFFFFFFFF
000003da: goto %000003d8

00000622:
00000625: RDI := 0x41
0000062a: RSP := RSP - 8
0000062d: mem := mem with [RSP, el]:u64 <- 0x4012EF
0000062f: call @putchar with return %00000631

00000631:
00000634: RDI := 0xA
00000639: mem := mem with [RBP - 0xF8, el]:u32 <- low:32[RAX]
0000063e: RSP := RSP - 8
00000641: mem := mem with [RSP, el]:u64 <- 0x4012FF
00000643: call @putchar with return %00000645

00000645:
00000647: goto %000005a3

000005a3:
000005a6: RAX := mem[RBP - 0xC8, el]:u64
000005ab: RCX := 0xFADEED00
000005b0: #67 := low:32[RCX] - mem[RAX + 4, el]:u32
000005b3: CF := low:32[RCX] < mem[RAX + 4, el]:u32
000005b6: OF := high:1[(low:32[RCX] ^ mem[RAX + 4, el]:u32) &
          (low:32[RCX] ^ #67)]
000005b9: AF := 0x10 = (0x10 & (#67 ^ low:32[RCX] ^ mem[RAX + 4, el]:u32))
000005bc: PF :=
          ~low:1[let $1 = #67 >> 4 ^ #67 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000005bf: SF := high:1[#67]
000005c2: ZF := 0 = #67
000005c7: when ~ZF goto %000005c5
000007b1: goto %000005fb

000005c5:
000005cd: RDI := 0x2A
000005d2: RSP := RSP - 8
000005d5: mem := mem with [RSP, el]:u64 <- 0x401368
000005d7: call @putchar with return %000005d9

000005d9:
000005dc: RDI := 0xA
000005e1: mem := mem with [RBP - 0x104, el]:u32 <- low:32[RAX]
000005e6: RSP := RSP - 8
000005e9: mem := mem with [RSP, el]:u64 <- 0x401378
000005eb: call @putchar with return %000005ed

000005ed:
000005f0: mem := mem with [RBP - 4, el]:u32 <- 0xFFFFFFFF
000005f4: goto %000003d8

000005fb:
000005fe: RDI := 0x41
00000603: RSP := RSP - 8
00000606: mem := mem with [RSP, el]:u64 <- 0x401349
00000608: call @putchar with return %0000060a

0000060a:
0000060d: RDI := 0xA
00000612: mem := mem with [RBP - 0x100, el]:u32 <- low:32[RAX]
00000617: RSP := RSP - 8
0000061a: mem := mem with [RSP, el]:u64 <- 0x401359
0000061c: call @putchar with return %0000061e

0000061e:
00000620: goto %000005f6

000005f6:
000005f9: mem := mem with [RBP - 4, el]:u32 <- 0
000007b2: goto %000003d8

000003d8:
000003de: RAX := pad:64[mem[RBP - 4, el]:u32]
000003e3: #38 := RSP
000003e6: RSP := RSP + 0x110
000003e9: CF := RSP < #38
000003ec: OF := ~high:1[#38] & (high:1[#38] | high:1[RSP]) &
          ~(high:1[#38] & high:1[RSP])
000003ef: AF := 0x10 = (0x10 & (RSP ^ #38 ^ 0x110))
000003f2: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000003f5: SF := high:1[RSP]
000003f8: ZF := 0 = RSP
000003fd: RBP := mem[RSP, el]:u64
00000400: RSP := RSP + 8
00000405: #41 := mem[RSP, el]:u64
00000408: RSP := RSP + 8
0000040a: call #41 with noreturn

000007b3: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000007c8: memcpy_dst :: in out u64 = RDI
000007c9: memcpy_src :: in out u64 = RSI
000007ca: memcpy_n :: in u64 = RDX
000007cb: memcpy_result :: out u64 = RAX

00000278:
0000071b: call @memcpy:external with return %0000071d

0000071d:
00000720: RSP := RSP - 8
00000723: mem := mem with [RSP, el]:u64 <- 3
00000727: call @.plt with noreturn

000007b4: sub memset(memset_buf, memset_c, memset_n, memset_result)
000007cc: memset_buf :: in out u64 = RDI
000007cd: memset_c :: in u32 = RSI
000007ce: memset_n :: in u64 = RDX
000007cf: memset_result :: out u64 = RAX

00000259:
0000070b: call @memset:external with return %0000070d

0000070d:
00000710: RSP := RSP - 8
00000713: mem := mem with [RSP, el]:u64 <- 2
00000717: call @.plt with noreturn

000007b5: sub printf(printf_format, printf_result)
000007d0: printf_format :: in u64 = RDI
000007d1: printf_result :: out u32 = RAX

000002ce:
000006fb: call @printf:external with return %000006fd

000006fd:
00000700: RSP := RSP - 8
00000703: mem := mem with [RSP, el]:u64 <- 1
00000707: call @.plt with noreturn

000007b6: sub putchar(putchar_c, putchar_result)
000007d2: putchar_c :: in u32 = RDI
000007d3: putchar_result :: out u32 = RAX

000003b4:
000006eb: call @putchar:external with return %000006ed

000006ed:
000006f0: RSP := RSP - 8
000006f3: mem := mem with [RSP, el]:u64 <- 0
000006f7: call @.plt with noreturn

000007b7: sub register_tm_clones(register_tm_clones_result)
000007d4: register_tm_clones_result :: out u32 = RAX

0000010c:
0000010f: RSI := 0x404048
00000114: #16 := RSI
00000117: RSI := RSI - 0x404048
0000011a: CF := #16 < 0x404048
0000011d: OF := high:1[(#16 ^ 0x404048) & (#16 ^ RSI)]
00000120: AF := 0x10 = (0x10 & (RSI ^ #16 ^ 0x404048))
00000123: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000126: SF := high:1[RSI]
00000129: ZF := 0 = RSI
0000012e: RAX := RSI
00000133: #19 := RSI
00000136: RSI := RSI >> 0x3F
00000139: CF := high:1[#19 << 1]
0000013c: SF := high:1[RSI]
0000013f: ZF := 0 = RSI
00000142: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000145: AF := unknown[bits]:u1
00000148: OF := unknown[bits]:u1
0000014d: #21 := RAX
00000150: RAX := RAX ~>> 3
00000153: CF := high:1[#21 << 0x3D]
00000156: SF := high:1[RAX]
00000159: ZF := 0 = RAX
0000015c: PF :=
          ~low:1[let $1 = RAX >> 4 ^ RAX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000015f: AF := unknown[bits]:u1
00000162: OF := unknown[bits]:u1
00000167: #23 := RSI
0000016a: #24 := RAX
0000016d: RSI := RSI + #24
00000170: CF := RSI < #23
00000173: OF := high:1[#23] = high:1[#24] & (high:1[#23] | high:1[RSI]) &
          ~(high:1[#23] & high:1[RSI])
00000176: AF := 0x10 = (0x10 & (RSI ^ #23 ^ #24))
00000179: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000017c: SF := high:1[RSI]
0000017f: ZF := 0 = RSI
00000184: #26 := RSI
00000187: RSI := RSI ~>> 1
0000018a: CF := high:1[#26 << 0x3F]
0000018d: SF := high:1[RSI]
00000190: ZF := 0 = RSI
00000193: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000196: AF := unknown[bits]:u1
00000199: OF := 0
0000019e: when ZF goto %0000019c
000007b8: goto %0000067d

0000067d:
00000680: RAX := 0
00000685: #71 := RAX
00000688: OF := 0
0000068b: CF := 0
0000068e: AF := unknown[bits]:u1
00000691: PF :=
          ~low:1[let $1 = #71 >> 4 ^ #71 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000694: SF := high:1[#71]
00000697: ZF := 0 = #71
0000069b: when ZF goto %0000019c
000007b9: goto %0000069f

0000019c:
000001a4: #28 := mem[RSP, el]:u64
000001a7: RSP := RSP + 8
000001a9: call #28 with noreturn

0000069f:
000006a2: RDI := 0x404048
000006a6: call RAX with noreturn

0000000a: sub endbr(endbr_result)
000007d5: endbr_result :: out u32 = RAX

000000c0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007d6: __libc_start_main_main :: in u64 = RDI
000007d7: __libc_start_main_arg2 :: in u32 = RSI
000007d8: __libc_start_main_arg3 :: in out u64 = RDX
000007d9: __libc_start_main_auxv :: in out u64 = RCX
000007da: __libc_start_main_result :: out u32 = RAX

00000719: sub memcpy:external(memcpy:external_result)
000007db: memcpy:external_result :: out u32 = RAX

00000709: sub memset:external(memset:external_result)
000007dc: memset:external_result :: out u32 = RAX

000006f9: sub printf:external(printf:external_result)
000007dd: printf:external_result :: out u32 = RAX

000006e9: sub putchar:external(putchar:external_result)
000007de: putchar:external_result :: out u32 = RAX
